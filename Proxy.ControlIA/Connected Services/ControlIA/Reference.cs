//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ControlIA
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConsumptionRecord", Namespace="http://schemas.datacontract.org/2004/07/Cenet.ElectronicInvoice.IA.Entities")]
    public partial class ConsumptionRecord : object
    {
        
        private int CompanyIDField;
        
        private int ConsumptionRecordIDField;
        
        private int MethodIDField;
        
        private string RequestField;
        
        private System.DateTime RequestDateTimeField;
        
        private string ResponseField;
        
        private System.DateTime ResponseDateTimeField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID
        {
            get
            {
                return this.CompanyIDField;
            }
            set
            {
                this.CompanyIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ConsumptionRecordID
        {
            get
            {
                return this.ConsumptionRecordIDField;
            }
            set
            {
                this.ConsumptionRecordIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MethodID
        {
            get
            {
                return this.MethodIDField;
            }
            set
            {
                this.MethodIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Request
        {
            get
            {
                return this.RequestField;
            }
            set
            {
                this.RequestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RequestDateTime
        {
            get
            {
                return this.RequestDateTimeField;
            }
            set
            {
                this.RequestDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Response
        {
            get
            {
                return this.ResponseField;
            }
            set
            {
                this.ResponseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ResponseDateTime
        {
            get
            {
                return this.ResponseDateTimeField;
            }
            set
            {
                this.ResponseDateTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName
        {
            get
            {
                return this.UserNameField;
            }
            set
            {
                this.UserNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyAPI", Namespace="http://schemas.datacontract.org/2004/07/Cenet.ElectronicInvoice.IA.Entities")]
    public partial class CompanyAPI : object
    {
        
        private int CompanyIDField;
        
        private string IdentificationField;
        
        private string PasswordField;
        
        private string RegistrationNameField;
        
        private int SchemaIDField;
        
        private int SoftwareIDField;
        
        private bool StateField;
        
        private string UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CompanyID
        {
            get
            {
                return this.CompanyIDField;
            }
            set
            {
                this.CompanyIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identification
        {
            get
            {
                return this.IdentificationField;
            }
            set
            {
                this.IdentificationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RegistrationName
        {
            get
            {
                return this.RegistrationNameField;
            }
            set
            {
                this.RegistrationNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SchemaID
        {
            get
            {
                return this.SchemaIDField;
            }
            set
            {
                this.SchemaIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SoftwareID
        {
            get
            {
                return this.SoftwareIDField;
            }
            set
            {
                this.SoftwareIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User
        {
            get
            {
                return this.UserField;
            }
            set
            {
                this.UserField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Software", Namespace="http://schemas.datacontract.org/2004/07/Cenet.ElectronicInvoice.IA.Entities")]
    public partial class Software : object
    {
        
        private int ChannelIDField;
        
        private System.DateTime DateCreationField;
        
        private string NameField;
        
        private string PasswordField;
        
        private int SoftwareIDField;
        
        private bool StateField;
        
        private string UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChannelID
        {
            get
            {
                return this.ChannelIDField;
            }
            set
            {
                this.ChannelIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreation
        {
            get
            {
                return this.DateCreationField;
            }
            set
            {
                this.DateCreationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SoftwareID
        {
            get
            {
                return this.SoftwareIDField;
            }
            set
            {
                this.SoftwareIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string User
        {
            get
            {
                return this.UserField;
            }
            set
            {
                this.UserField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ControlIA.IControlIA")]
    public interface IControlIA
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/IsActiveSoftware", ReplyAction="http://tempuri.org/IControlIA/IsActiveSoftwareResponse")]
        System.Threading.Tasks.Task<bool> IsActiveSoftwareAsync(string prmUsername, string prmPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/ExistsSoftware", ReplyAction="http://tempuri.org/IControlIA/ExistsSoftwareResponse")]
        System.Threading.Tasks.Task<bool> ExistsSoftwareAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/IsValidSoftwareToCompany", ReplyAction="http://tempuri.org/IControlIA/IsValidSoftwareToCompanyResponse")]
        System.Threading.Tasks.Task<int> IsValidSoftwareToCompanyAsync(string username, string schemaID, string numberID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/InsertConsumptionRecord", ReplyAction="http://tempuri.org/IControlIA/InsertConsumptionRecordResponse")]
        System.Threading.Tasks.Task<int> InsertConsumptionRecordAsync(ControlIA.ConsumptionRecord prmConsumptionRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/UpdateConsumptionRecord", ReplyAction="http://tempuri.org/IControlIA/UpdateConsumptionRecordResponse")]
        System.Threading.Tasks.Task UpdateConsumptionRecordAsync(ControlIA.ConsumptionRecord prmConsumptionRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/InsertAPI", ReplyAction="http://tempuri.org/IControlIA/InsertAPIResponse")]
        System.Threading.Tasks.Task<bool> InsertAPIAsync(ControlIA.CompanyAPI prmCompanyAPI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/GetAllSoftware", ReplyAction="http://tempuri.org/IControlIA/GetAllSoftwareResponse")]
        System.Threading.Tasks.Task<ControlIA.Software[]> GetAllSoftwareAsync(int ChannelID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/GetByIdAPI", ReplyAction="http://tempuri.org/IControlIA/GetByIdAPIResponse")]
        System.Threading.Tasks.Task<ControlIA.CompanyAPI> GetByIdAPIAsync(int CompanyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/GetByIdSoftware", ReplyAction="http://tempuri.org/IControlIA/GetByIdSoftwareResponse")]
        System.Threading.Tasks.Task<ControlIA.Software> GetByIdSoftwareAsync(int SoftwareID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/UpdateAPI", ReplyAction="http://tempuri.org/IControlIA/UpdateAPIResponse")]
        System.Threading.Tasks.Task<bool> UpdateAPIAsync(ControlIA.CompanyAPI prmCompanyAPI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/UpdateSoftware", ReplyAction="http://tempuri.org/IControlIA/UpdateSoftwareResponse")]
        System.Threading.Tasks.Task<bool> UpdateSoftwareAsync(ControlIA.Software prmSoftware);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/DeleteSoftware", ReplyAction="http://tempuri.org/IControlIA/DeleteSoftwareResponse")]
        System.Threading.Tasks.Task<bool> DeleteSoftwareAsync(int SoftwareID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/ValidateUserAPI", ReplyAction="http://tempuri.org/IControlIA/ValidateUserAPIResponse")]
        System.Threading.Tasks.Task<ControlIA.CompanyAPI> ValidateUserAPIAsync(ControlIA.CompanyAPI prmCompanyAPI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlIA/InsertSoftware", ReplyAction="http://tempuri.org/IControlIA/InsertSoftwareResponse")]
        System.Threading.Tasks.Task<bool> InsertSoftwareAsync(ControlIA.Software prmSoftware);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IControlIAChannel : ControlIA.IControlIA, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ControlIAClient : System.ServiceModel.ClientBase<ControlIA.IControlIA>, ControlIA.IControlIA
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        public ControlIAClient() { }
        public ControlIAClient(EndpointConfiguration endpointConfiguration) : 
                base(ControlIAClient.GetBindingForEndpoint(endpointConfiguration), ControlIAClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ControlIAClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ControlIAClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ControlIAClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ControlIAClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ControlIAClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> IsActiveSoftwareAsync(string prmUsername, string prmPassword)
        {
            return base.Channel.IsActiveSoftwareAsync(prmUsername, prmPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ExistsSoftwareAsync(string username)
        {
            return base.Channel.ExistsSoftwareAsync(username);
        }
        
        public System.Threading.Tasks.Task<int> IsValidSoftwareToCompanyAsync(string username, string schemaID, string numberID)
        {
            return base.Channel.IsValidSoftwareToCompanyAsync(username, schemaID, numberID);
        }
        
        public System.Threading.Tasks.Task<int> InsertConsumptionRecordAsync(ControlIA.ConsumptionRecord prmConsumptionRecord)
        {
            return base.Channel.InsertConsumptionRecordAsync(prmConsumptionRecord);
        }
        
        public System.Threading.Tasks.Task UpdateConsumptionRecordAsync(ControlIA.ConsumptionRecord prmConsumptionRecord)
        {
            return base.Channel.UpdateConsumptionRecordAsync(prmConsumptionRecord);
        }
        
        public System.Threading.Tasks.Task<bool> InsertAPIAsync(ControlIA.CompanyAPI prmCompanyAPI)
        {
            return base.Channel.InsertAPIAsync(prmCompanyAPI);
        }
        
        public System.Threading.Tasks.Task<ControlIA.Software[]> GetAllSoftwareAsync(int ChannelID)
        {
            return base.Channel.GetAllSoftwareAsync(ChannelID);
        }
        
        public System.Threading.Tasks.Task<ControlIA.CompanyAPI> GetByIdAPIAsync(int CompanyID)
        {
            return base.Channel.GetByIdAPIAsync(CompanyID);
        }
        
        public System.Threading.Tasks.Task<ControlIA.Software> GetByIdSoftwareAsync(int SoftwareID)
        {
            return base.Channel.GetByIdSoftwareAsync(SoftwareID);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAPIAsync(ControlIA.CompanyAPI prmCompanyAPI)
        {
            return base.Channel.UpdateAPIAsync(prmCompanyAPI);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSoftwareAsync(ControlIA.Software prmSoftware)
        {
            return base.Channel.UpdateSoftwareAsync(prmSoftware);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSoftwareAsync(int SoftwareID)
        {
            return base.Channel.DeleteSoftwareAsync(SoftwareID);
        }
        
        public System.Threading.Tasks.Task<ControlIA.CompanyAPI> ValidateUserAPIAsync(ControlIA.CompanyAPI prmCompanyAPI)
        {
            return base.Channel.ValidateUserAPIAsync(prmCompanyAPI);
        }
        
        public System.Threading.Tasks.Task<bool> InsertSoftwareAsync(ControlIA.Software prmSoftware)
        {
            return base.Channel.InsertSoftwareAsync(prmSoftware);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IControlIA))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IControlIA))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IControlIA))
            {
                return new System.ServiceModel.EndpointAddress("http://win2019-20.cenet2000/Cenet.ElectronicInvoice.IA.WCFIntegrationAPI/ControlI" +
                        "A.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_IControlIA))
            {
                return new System.ServiceModel.EndpointAddress("https://192.168.55.170/Cenet.ElectronicInvoice.IA.WCFIntegrationAPI/ControlIA.svc" +
                        "");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IControlIA,
            
            BasicHttpsBinding_IControlIA,
        }
    }
}
